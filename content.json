{"pages":[],"posts":[{"title":"idea导入项目后左侧目录不显示项目结构的解决方法","text":"1.顶栏找到file -&gt; project structure -&gt; Modules 点击左上角+号 -&gt; import Module 2.找到你的项目点ok 3.选择maven，next 4.一直next，最后finished完成","link":"/2020/06/08/idea%E5%AF%BC%E5%85%A5%E9%A1%B9%E7%9B%AE%E5%90%8E%E5%B7%A6%E4%BE%A7%E7%9B%AE%E5%BD%95%E4%B8%8D%E6%98%BE%E7%A4%BA%E9%A1%B9%E7%9B%AE%E7%BB%93%E6%9E%84%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/"},{"title":"Docker安装遇到的问题","text":"安装过程：网上搜了windows下安装doker的步骤，win7、win8是利用docker toolbox，安装win10是docker for windows安装。 我按照win10的来，先启用hyper-v，然后去docker官网https://www.docker.com/products/docker-desktop下载windows版docker。 结果启用hyper-v这一步直接卡住了，因为我的win10是家庭中文版，没有hyper-v，所以我又去搜了win10家庭版如何安装hyper-v。 装好之后，去官网下载docker，下好之后运行，报错： docker desktop requires windows 10 pro/Enterprise(15063+) or windows 10 home (19018+)又百度了一下才发现Docker可以支持在 Mac、Windows、Linux 上安装，但是在 Windows10 系统中Docker for Windows目前只能在 64 位的 Windows10 专业版、企业版、教育版下才能安装，Win7/Win8/Win10 家庭版需要通过Docker Toolbox来安装，我的电脑是家庭版的，却要安装Docker for Windows，我的电脑刚好就是win10家庭版………… 没办法，只能换成docker toolbox来安装docker 步骤： 1.检擦虚拟化是否开启：打开任务管理器-选择性能选项卡，右下方 虚拟化：已启用 2.下载docker-toolbox 下载地址：https://get.daocloud.io/toolbox/ 3.安装，一路默认，安装完成后桌面出现三个图标 4.双击Docker Quickstart Terminal，会自动打开命令行安装 安装过程中出现错误： Running pre-create checks... Error with pre-create check: &quot;This computer is running Hyper-V. VirtualBox won&apos;t boot a 64bits VM when Hyper-V is activated. Either use Hyper-V as a driver, or disable the Hyper-V hypervisor. (To skip this check, use --virtualbox-no-vtx-check)&quot; Looks like something went wrong in step ´Checking if machine default exists´... Press any key to continue...Docker for Windows是依赖 Hyper-v 的，但是Docker Toolbox是用VirtualBox的，我在上一步的时候已经安装了Hyper-v，所以会导致在docker toolbox的步骤中启用docker quickstart terminal这一步报错 解决方法：管理员身份运行命令提示符 cmd bcdedit /copy {current} /d “Windows10 no Hyper-V bcdedit /set {XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX} hypervisorlaunchtype OFF将查询出来的64位编码替换上面的XXX代码即可 重启 Windows10 就能选择是否启用 Hyper-v，在“no Hyper-V”中，可以运行 Vmware 虚拟机，而另一个启动选项运行 Hyper-v 5.重新打开Docker Quickstart Terminal等待出现小鲸鱼就代表启动成功了","link":"/2020/06/12/Docker%E5%AE%89%E8%A3%85%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/"},{"title":"case when使用问题","text":"case when 使用问题Oracle 中case when 报错 字符集不匹配错误语句： case when （select name from crm_category） is null then &apos;字符串&apos; else （select name from crm_category） end 由于name是NVARCHAR2类型，导致else后的name字段类型不匹配,需要to_char转换 case when （select name from crm_category） is null then &apos;字符串&apos; else to_char((select name from crm_category)) end为什么case when后的name不需要转换，而else后的name需要转化呢，这是一开始报错我想不明白的","link":"/2020/07/13/case-when%E4%BD%BF%E7%94%A8%E9%97%AE%E9%A2%98/"},{"title":"java空指针异常","text":"空指针异常问题：可能原因1：controller中导入类的时候没有加@AutoWired注解","link":"/2020/07/04/java%E7%A9%BA%E6%8C%87%E9%92%88%E5%BC%82%E5%B8%B8/"},{"title":"java基础总结","text":"Java语言 基础语法 面向对象 接口 容器 异常 泛型 反射 注解 I/O JVM虚拟机 类加载机制 字节码执行机制 JVM内存模型 GC垃圾回收 JVM性能监控与故障定位 JVM调优 多线程/并发 并发编程的基础 线程池 锁 并发容器 原子类 JUC并发工具类 数据结构 字符串 数组 链表 堆、栈、队列 二叉树 哈希 图 算法 排序 查找 贪心 分治 动态规划 回溯 计算机网络 APP协议 IP协议 TCP、UDP协议 DNS/HTTP/HTTPS协议 Session/Cookie Sql/数据库 SQL语句的书写 SQL语句的优化 事务、隔离级别 索引 锁 操作系统 进程、线程 并发、锁 内存管理和调度 I/O原理 设计模式 单例 工厂 代理 策略 模板方法 观察者 适配器 责任链 建造者 研发工具 Intellij IEDA VSCode linux 常用命令 Shell脚本 代码管理工具 SVN Git 项目管理/构建工具 Maven Gradle","link":"/2020/07/05/java%E5%9F%BA%E7%A1%80%E6%80%BB%E7%BB%93/"},{"title":"oracle时间格式化","text":"oracle中的时间格式化yyyy-MM-dd HH24:mi:ss，一般的时间格式化为yyyy-MM-dd HH:mm:ss，在写oralce的sql时要注意 时、分的写法。","link":"/2020/06/22/oracle%E6%97%B6%E9%97%B4%E6%A0%BC%E5%BC%8F%E5%8C%96/"},{"title":".netcore webapi中各层的作用","text":"Domnias。存放我们的实体类，与数据库中的属性值基本保持一致。 Dtos。项目中前端需要的数据可能与实体类不同，这种情况将所需要的数据封装到Dto进行操作。DTO层的作用是为了隔离Domain Model，让DoMain Model的改du动不会直接影响到UI；保持Domain Model的安全zhi,不暴露业务逻辑dao DbContext。entity Framework的上下文配置 Interface。接口 Implementions。接口实现类，只存放业务逻辑 Controllers。控制器，导入service层，因为service中的接口方法是我们使用到的，controller通过接收前端传过来的参数进行业务操作，在返回一个指定的路径或者数据表。 Requests。参数类","link":"/2020/06/08/netcore-webapi%E4%B8%AD%E5%90%84%E5%B1%82%E7%9A%84%E4%BD%9C%E7%94%A8/"},{"title":"springboot中的封装统一返回的数据结构","text":"定义统一的的json结构public class JsonResult&lt;T&gt; { private T data; private String code; private String msg; /** * 若没有数据返回，默认状态码为0，提示信息为：操作成功！ */ public JsonResult() { this.code = &quot;0&quot;; this.msg = &quot;操作成功！&quot;; } /** * 若没有数据返回，可以人为指定状态码和提示信息 * @param code * @param msg */ public JsonResult(String code, String msg) { this.code = code; this.msg = msg; } /** * 有数据返回时，状态码为0，默认提示信息为：操作成功！ * @param data */ public JsonResult(T data) { this.data = data; this.code = &quot;0&quot;; this.msg = &quot;操作成功！&quot;; } /** * 有数据返回，状态码为0，人为指定提示信息 * @param data * @param msg */ public JsonResult(T data, String msg) { this.data = data; this.code = &quot;0&quot;; this.msg = msg; } // 省略get和set方法 }修改 Controller 中的返回值类型及测试@RestController @RequestMapping(&quot;/jsonresult&quot;) public class JsonResultController { @RequestMapping(&quot;/user&quot;) public JsonResult&lt;User&gt; getUser() { User user = new User(1, &quot;小明&quot;, &quot;123456&quot;); return new JsonResult&lt;&gt;(user); } }localhost:8080/jsonresult/user返回的json： {&quot;code&quot;:&quot;0&quot;,&quot;data&quot;:{&quot;id&quot;:1,&quot;password&quot;:&quot;123456&quot;,&quot;username&quot;:&quot;小明&quot;},&quot;msg&quot;:&quot;操作成功！&quot;}","link":"/2020/06/08/springboot%E4%B8%AD%E7%9A%84%E5%B0%81%E8%A3%85%E7%BB%9F%E4%B8%80%E8%BF%94%E5%9B%9E%E7%9A%84%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"},{"title":"WebService和WebApi","text":"WebService的特征：1 基于SOAP协议的，数据格式为XML 2 只支持HTTP协议 3 不是开源的，但可以被任意一个了解XML的人使用 4 只能部署在IIS上 SOAP :简单对象访问协议Simple Object Access Protocol,传输层 ，,XML传输消息 WSDL:Web Server Description Language ：Web Server描述语言(元数据)，给客户端生成代理类的一个描述信息 UDDI :提供了一组基于标准的规范用于描述和发现服务，统一描述，发现和集成（UDDI-Universal Descript,Discovery,Integration），提供注册和查找服务 客户端在UDDI注册表（Registry）查找服务，取得服务的WSDL描述，通过SOAP调用服务。 WebAPI 特征：1 是简单的 构建HTTP服务的新框架 2 在.net平台上WebApi是一个开源的，理想的，构建REST-FUL服务的技术 3 不想WCF REST Server 它可以使用HTTP的全部特点（URI,request/response头，缓存，版本控制，多种内容格式） 4 支持MVC的特征。像路由、控制器、action、filter、模型绑定、控制反转（IOC）或依赖注入（DI），单元测试。 4 可以部署在IIS和应用程序上 6 轻量级框架，并且对限制带宽的设备，比如智能手机等支持的很好 7、Response可以被Web API的MediaTypeFormatter转换成Json、XML 或者任何你想转换的格式。 8、Web API非常适合构建移动客户端服务 以下情况可以考虑用Web API 1、 需要Web Service但是不需要SOAP 2、 需要在已有的WCF服务基础上建立non-soap-based http服务 3、 只想发布一些简单的Http服务，不想使用相对复杂的WCF配置 4、 发布的服务可能会被带宽受限的设备访问 5、 希望使用开源框架，关键时候可以自己调试或者自定义一下框架 6、如果服务需要在http协议上，并且希望利用http协议的各种功能 7、如果服务需要被各种客户端(特别是移动客户端)调用 webapi多用于基于http请求的服务应用,比如说移动服务端或者需要提供第三方API 服务的场景下 webservice也可以应用于webapi所在的场景，一般是做为内部服务的使用，好比如果一个系统用wcf/webservice作为内部子系统间的服务通信，而webapi用于外部服务的请求。 原文链接：https://www.jianshu.com/p/189be4296e30","link":"/2020/06/08/%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB/"},{"title":"ssm中各层的作用","text":"model层=entity层。存放我们的实体类，与数据库中的属性值基本保持一致。 service层。存放业务逻辑处理，也是一些关于数据库处理的操作，但不是直接和数据库打交道，他有接口还有接口的实现方法，在接口的实现方法中需要导入mapper层，mapper层是直接跟数据库打交道的，他也是个接口，只有方法名字，具体实现在mapper.xml文件里，service是供我们使用的方法。 mapper层=dao层，现在用mybatis逆向工程生成的mapper层，其实就是dao层。对数据库进行数据持久化操作，他的方法语句是直接针对数据库操作的，而service层是针对我们controller，也就是针对我们使用者。service的impl是把mapper和service进行整合的文件。 （数据持久化操作就是指，把数据放到持久化的介质中，同时提供增删改查操作，这个介质可以理解为mybatis的实现。） controller层。控制器，导入service层，因为service中的接口方法是我们使用到的，controller通过接收前端传过来的参数进行业务操作，在返回一个指定的路径或者数据表。 在MyBatis中mybatis-generator可以自动生成的四个文件：分别对应的是entity层，Mapper层，XML配置文件；而service层需要自己导入Mapper层并实现相应的方法。","link":"/2020/06/08/ssm%E4%B8%AD%E5%90%84%E5%B1%82%E7%9A%84%E4%BD%9C%E7%94%A8/"},{"title":"springboot中的全局异常处理","text":"定义一个异常信息枚举类/** * 业务异常提示信息枚举类 * @author shengwu ni */ public enum BusinessMsgEnum { /** 参数异常 */ PARMETER_EXCEPTION(&quot;102&quot;, &quot;参数异常!&quot;), /** 等待超时 */ SERVICE_TIME_OUT(&quot;103&quot;, &quot;服务调用超时！&quot;), /** 参数过大 */ PARMETER_BIG_EXCEPTION(&quot;102&quot;, &quot;输入的图片数量不能超过50张!&quot;), /** 500 : 一劳永逸的提示也可以在这定义 */ UNEXPECTED_EXCEPTION(&quot;500&quot;, &quot;系统发生异常，请联系管理员！&quot;); // 还可以定义更多的业务异常 /** * 消息码 */ private String code; /** * 消息内容 */ private String msg; private BusinessMsgEnum(String code, String msg) { this.code = code; this.msg = msg; } // set get方法 }定义一个 BusinessErrorException 异常来模拟业务异常/** * 自定义业务异常 * @author shengwu ni */ public class BusinessErrorException extends RuntimeException { private static final long serialVersionUID = -7480022450501760611L; /** * 异常码 */ private String code; /** * 异常提示信息 */ private String message; public BusinessErrorException(BusinessMsgEnum businessMsgEnum) { this.code = businessMsgEnum.code(); this.message = businessMsgEnum.msg(); } // get set方法 }拦截自定义异常@ControllerAdvice @ResponseBody public class GlobalExceptionHandler { private static final Logger logger = LoggerFactory.getLogger(GlobalExceptionHandler.class); /** * 拦截业务异常，返回业务异常信息 * @param ex * @return */ @ExceptionHandler(BusinessErrorException.class) @ResponseStatus(value = HttpStatus.INTERNAL_SERVER_ERROR) public JsonResult handleBusinessError(BusinessErrorException ex) { String code = ex.getCode(); String message = ex.getMessage(); return new JsonResult(code, message); } }模拟抛出业务异常@RestController @RequestMapping(&quot;/exception&quot;) public class ExceptionController { private static final Logger logger = LoggerFactory.getLogger(ExceptionController.class); @GetMapping(&quot;/business&quot;) public JsonResult testException() { try { int i = 1 / 0; } catch (Exception e) { throw new BusinessErrorException(BusinessMsgEnum.UNEXPECTED_EXCEPTION); } return new JsonResult(); } }返回 json 如下{&quot;code&quot;:&quot;500&quot;,&quot;msg&quot;:&quot;系统发生异常，请联系管理员！&quot;}","link":"/2020/06/08/springboot%E4%B8%AD%E7%9A%84%E5%85%A8%E5%B1%80%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/"},{"title":"应用框架","text":"Spring Ioc AopSpringMVC SpringBoot 自动配置 整合Web 整合数据库（事务问题） 整合权限（Shiro,Spring Security） 整合各种中间件(Redis,MQ,RPC框架,NIO框架) Web服务器Nginx 应用服务器 Tomcat jetty Undertow 中间件缓存 5大基础数据类型 事务 管道 持久化 集群 消息队列 RocketMQ RabbitMQ KafKa RPC框架 Dubbo GRPC Thrift Spring Cloud Netty 数据库框架ORM层框架 Mybatis Hibemate JPA 连接池 Druid HikariCP JPA 分库分表 MyCAT Sharding-JDBC Sharding-Sphere 搜索引擎 ElasticSearch Soir 分布式/微服务服务发现/注册 Eureka Consul Zookeeper Nacos 网关 Zuul Gateway 服务调用(负载均衡)RibbonFeign 熔断/降级Hystrix 配置中心 Config Apollo Nacos 认证和鉴权 Spring Security OAuth2 SSO单点登录 分布式事务 JTA接口—Atomikos组件 2PC、3PC XA模式 任务调度 Quartz Elasic-job 链路追踪和监控 Zipkin Sleuth Skywalking 日志分析与监控 ElasticSearch Logstash Kibana 虚拟化/容器化 容器技术 — Docker 容器自动编排技术–Kubemetes,Swarm 运维知识 Web服务器 — Nginx 应用服务器 —-Tomcat,Jetty,Undertow CDN加速 持续集成/持续部署 代码质量检查 — sonar 日志手机和分析 —–ELK","link":"/2020/07/05/%E5%BA%94%E7%94%A8%E6%A1%86%E6%9E%B6/"},{"title":"数据结构之排序","text":"数据结构之各种排序的时间复杂度、空间复杂度、稳定性、复杂性","link":"/2020/07/06/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8B%E6%8E%92%E5%BA%8F/"},{"title":"数据库操作习惯","text":"数据库中，操作update，delete脚本时。先select确认一下再执行。","link":"/2020/06/05/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%93%8D%E4%BD%9C%E4%B9%A0%E6%83%AF/"}],"tags":[{"name":"idea","slug":"idea","link":"/tags/idea/"},{"name":"docker","slug":"docker","link":"/tags/docker/"},{"name":"数据库","slug":"数据库","link":"/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"},{"name":"springboot","slug":"springboot","link":"/tags/springboot/"},{"name":"java","slug":"java","link":"/tags/java/"},{"name":"oracle","slug":"oracle","link":"/tags/oracle/"},{"name":"分层开发","slug":"分层开发","link":"/tags/%E5%88%86%E5%B1%82%E5%BC%80%E5%8F%91/"},{"name":"webapi","slug":"webapi","link":"/tags/webapi/"},{"name":"前后端分离","slug":"前后端分离","link":"/tags/%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB/"},{"name":"ssm","slug":"ssm","link":"/tags/ssm/"},{"name":"后端应用框架","slug":"后端应用框架","link":"/tags/%E5%90%8E%E7%AB%AF%E5%BA%94%E7%94%A8%E6%A1%86%E6%9E%B6/"},{"name":"数据结构","slug":"数据结构","link":"/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"categories":[{"name":"idea","slug":"idea","link":"/categories/idea/"},{"name":"docker","slug":"docker","link":"/categories/docker/"},{"name":"数据库","slug":"数据库","link":"/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"},{"name":"springboot","slug":"springboot","link":"/categories/springboot/"},{"name":"java","slug":"java","link":"/categories/java/"},{"name":"oracle","slug":"oracle","link":"/categories/oracle/"},{"name":"分层开发","slug":"分层开发","link":"/categories/%E5%88%86%E5%B1%82%E5%BC%80%E5%8F%91/"},{"name":"webapi","slug":"分层开发/webapi","link":"/categories/%E5%88%86%E5%B1%82%E5%BC%80%E5%8F%91/webapi/"},{"name":"前后端分离","slug":"前后端分离","link":"/categories/%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB/"},{"name":"ssm","slug":"分层开发/ssm","link":"/categories/%E5%88%86%E5%B1%82%E5%BC%80%E5%8F%91/ssm/"},{"name":"后端应用框架","slug":"后端应用框架","link":"/categories/%E5%90%8E%E7%AB%AF%E5%BA%94%E7%94%A8%E6%A1%86%E6%9E%B6/"},{"name":"数据结构","slug":"数据结构","link":"/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}]}