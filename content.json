{"pages":[],"posts":[{"title":"数学符号","text":"1、 Α α alpha a:lf 阿尔法du 角度zhi；系数dao 2 、Β β beta bet 贝塔 磁通系数；角度；系数 3、 Γ γ gamma ga:m 伽马 电导系数（小写） 4、 Δ δ delta delt 德尔塔 变动；密度；屈光度 5、 Ε ε epsilon ep`silon 伊普西龙 对数之基数 6、 Ζ ζ zeta zat 截塔 系数；方位角；阻抗；相对粘度；原子序数 7、 Η η eta eit 艾塔 磁滞系数；效率（小写） 8、 Θ θ thet θit 西塔 温度；相位角 9、 Ι ι iot aiot 约塔 微小，一点儿 10、 Κ κ kappa kap 卡帕 介质常数 11、 ∧ λ lambda lambd 兰布达波长（小写）；体积 12、 Μ μ mu mju 缪 磁导系数；微（千分之一）；放大因数（小写） 13、 Ν ν nu nju 纽 磁阻系数 14、 Ξ ξ xi ksi 克西 15、 Ο ο omicron omik`ron 奥密克戎 16、 ∏ π pi pai 派 圆周率=圆周÷直径=. 17、 Ρ ρ rho rou 肉 电阻系数（小写） 18、 ∑ σ sigma `sigma 西格马 总和（大写），表面密度；跨导（小写） 19、 Τ τ tau tau 套 时间常数 20、 Υ υ upsilon jup`silon 宇普西龙 位移 21、 Φ φ phi fai 佛爱 磁通；角 22、Χ χ chi phai 西 23、 Ψ ψ psi psai 普西 角速；介质电通量（静电力线）；角 24、 Ω ω omega o`miga 欧米伽 欧姆（大写）；角速（小写）；角","link":"/2020/06/04/%E6%95%B0%E5%AD%A6%E7%AC%A6%E5%8F%B7/"},{"title":"数据库操作习惯","text":"数据库中，操作update，delete脚本时。先select确认一下再执行。","link":"/2020/06/05/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%93%8D%E4%BD%9C%E4%B9%A0%E6%83%AF/"},{"title":"idea导入项目后左侧目录不显示项目结构的解决方法","text":"1.顶栏找到file -&gt; project structure -&gt; Modules 点击左上角+号 -&gt; import Module 2.找到你的项目点ok 3.选择maven，next 4.一直next，最后finished完成","link":"/2020/06/08/idea%E5%AF%BC%E5%85%A5%E9%A1%B9%E7%9B%AE%E5%90%8E%E5%B7%A6%E4%BE%A7%E7%9B%AE%E5%BD%95%E4%B8%8D%E6%98%BE%E7%A4%BA%E9%A1%B9%E7%9B%AE%E7%BB%93%E6%9E%84%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/"},{"title":"WebService和WebApi","text":"WebService的特征：1 基于SOAP协议的，数据格式为XML 2 只支持HTTP协议 3 不是开源的，但可以被任意一个了解XML的人使用 4 只能部署在IIS上 SOAP :简单对象访问协议Simple Object Access Protocol,传输层 ，,XML传输消息 WSDL:Web Server Description Language ：Web Server描述语言(元数据)，给客户端生成代理类的一个描述信息 UDDI :提供了一组基于标准的规范用于描述和发现服务，统一描述，发现和集成（UDDI-Universal Descript,Discovery,Integration），提供注册和查找服务 客户端在UDDI注册表（Registry）查找服务，取得服务的WSDL描述，通过SOAP调用服务。 WebAPI 特征：1 是简单的 构建HTTP服务的新框架 2 在.net平台上WebApi是一个开源的，理想的，构建REST-FUL服务的技术 3 不想WCF REST Server 它可以使用HTTP的全部特点（URI,request/response头，缓存，版本控制，多种内容格式） 4 支持MVC的特征。像路由、控制器、action、filter、模型绑定、控制反转（IOC）或依赖注入（DI），单元测试。 4 可以部署在IIS和应用程序上 6 轻量级框架，并且对限制带宽的设备，比如智能手机等支持的很好 7、Response可以被Web API的MediaTypeFormatter转换成Json、XML 或者任何你想转换的格式。 8、Web API非常适合构建移动客户端服务 以下情况可以考虑用Web API 1、 需要Web Service但是不需要SOAP 2、 需要在已有的WCF服务基础上建立non-soap-based http服务 3、 只想发布一些简单的Http服务，不想使用相对复杂的WCF配置 4、 发布的服务可能会被带宽受限的设备访问 5、 希望使用开源框架，关键时候可以自己调试或者自定义一下框架 6、如果服务需要在http协议上，并且希望利用http协议的各种功能 7、如果服务需要被各种客户端(特别是移动客户端)调用 webapi多用于基于http请求的服务应用,比如说移动服务端或者需要提供第三方API 服务的场景下 webservice也可以应用于webapi所在的场景，一般是做为内部服务的使用，好比如果一个系统用wcf/webservice作为内部子系统间的服务通信，而webapi用于外部服务的请求。 原文链接：https://www.jianshu.com/p/189be4296e30","link":"/2020/06/08/%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB/"},{"title":"ssm中各层的作用","text":"model层=entity层。存放我们的实体类，与数据库中的属性值基本保持一致。 service层。存放业务逻辑处理，也是一些关于数据库处理的操作，但不是直接和数据库打交道，他有接口还有接口的实现方法，在接口的实现方法中需要导入mapper层，mapper层是直接跟数据库打交道的，他也是个接口，只有方法名字，具体实现在mapper.xml文件里，service是供我们使用的方法。 mapper层=dao层，现在用mybatis逆向工程生成的mapper层，其实就是dao层。对数据库进行数据持久化操作，他的方法语句是直接针对数据库操作的，而service层是针对我们controller，也就是针对我们使用者。service的impl是把mapper和service进行整合的文件。 （数据持久化操作就是指，把数据放到持久化的介质中，同时提供增删改查操作，这个介质可以理解为mybatis的实现。） controller层。控制器，导入service层，因为service中的接口方法是我们使用到的，controller通过接收前端传过来的参数进行业务操作，在返回一个指定的路径或者数据表。 在MyBatis中mybatis-generator可以自动生成的四个文件：分别对应的是entity层，Mapper层，XML配置文件；而service层需要自己导入Mapper层并实现相应的方法。","link":"/2020/06/08/ssm%E4%B8%AD%E5%90%84%E5%B1%82%E7%9A%84%E4%BD%9C%E7%94%A8/"},{"title":".netcore webapi中各层的作用","text":"Domnias。存放我们的实体类，与数据库中的属性值基本保持一致。 Dtos。项目中前端需要的数据可能与实体类不同，这种情况将所需要的数据封装到Dto进行操作。DTO层的作用是为了隔离Domain Model，让DoMain Model的改du动不会直接影响到UI；保持Domain Model的安全zhi,不暴露业务逻辑dao DbContext。entity Framework的上下文配置 Interface。接口 Implementions。接口实现类，只存放业务逻辑 Controllers。控制器，导入service层，因为service中的接口方法是我们使用到的，controller通过接收前端传过来的参数进行业务操作，在返回一个指定的路径或者数据表。 Requests。参数类","link":"/2020/06/08/netcore-webapi%E4%B8%AD%E5%90%84%E5%B1%82%E7%9A%84%E4%BD%9C%E7%94%A8/"},{"title":"springboot中的全局异常处理","text":"定义一个异常信息枚举类/** * 业务异常提示信息枚举类 * @author shengwu ni */ public enum BusinessMsgEnum { /** 参数异常 */ PARMETER_EXCEPTION(&quot;102&quot;, &quot;参数异常!&quot;), /** 等待超时 */ SERVICE_TIME_OUT(&quot;103&quot;, &quot;服务调用超时！&quot;), /** 参数过大 */ PARMETER_BIG_EXCEPTION(&quot;102&quot;, &quot;输入的图片数量不能超过50张!&quot;), /** 500 : 一劳永逸的提示也可以在这定义 */ UNEXPECTED_EXCEPTION(&quot;500&quot;, &quot;系统发生异常，请联系管理员！&quot;); // 还可以定义更多的业务异常 /** * 消息码 */ private String code; /** * 消息内容 */ private String msg; private BusinessMsgEnum(String code, String msg) { this.code = code; this.msg = msg; } // set get方法 }定义一个 BusinessErrorException 异常来模拟业务异常/** * 自定义业务异常 * @author shengwu ni */ public class BusinessErrorException extends RuntimeException { private static final long serialVersionUID = -7480022450501760611L; /** * 异常码 */ private String code; /** * 异常提示信息 */ private String message; public BusinessErrorException(BusinessMsgEnum businessMsgEnum) { this.code = businessMsgEnum.code(); this.message = businessMsgEnum.msg(); } // get set方法 }拦截自定义异常@ControllerAdvice @ResponseBody public class GlobalExceptionHandler { private static final Logger logger = LoggerFactory.getLogger(GlobalExceptionHandler.class); /** * 拦截业务异常，返回业务异常信息 * @param ex * @return */ @ExceptionHandler(BusinessErrorException.class) @ResponseStatus(value = HttpStatus.INTERNAL_SERVER_ERROR) public JsonResult handleBusinessError(BusinessErrorException ex) { String code = ex.getCode(); String message = ex.getMessage(); return new JsonResult(code, message); } }模拟抛出业务异常@RestController @RequestMapping(&quot;/exception&quot;) public class ExceptionController { private static final Logger logger = LoggerFactory.getLogger(ExceptionController.class); @GetMapping(&quot;/business&quot;) public JsonResult testException() { try { int i = 1 / 0; } catch (Exception e) { throw new BusinessErrorException(BusinessMsgEnum.UNEXPECTED_EXCEPTION); } return new JsonResult(); } }返回 json 如下{&quot;code&quot;:&quot;500&quot;,&quot;msg&quot;:&quot;系统发生异常，请联系管理员！&quot;}","link":"/2020/06/08/springboot%E4%B8%AD%E7%9A%84%E5%85%A8%E5%B1%80%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/"},{"title":"springboot中的封装统一返回的数据结构","text":"定义统一的的json结构public class JsonResult&lt;T&gt; { private T data; private String code; private String msg; /** * 若没有数据返回，默认状态码为0，提示信息为：操作成功！ */ public JsonResult() { this.code = &quot;0&quot;; this.msg = &quot;操作成功！&quot;; } /** * 若没有数据返回，可以人为指定状态码和提示信息 * @param code * @param msg */ public JsonResult(String code, String msg) { this.code = code; this.msg = msg; } /** * 有数据返回时，状态码为0，默认提示信息为：操作成功！ * @param data */ public JsonResult(T data) { this.data = data; this.code = &quot;0&quot;; this.msg = &quot;操作成功！&quot;; } /** * 有数据返回，状态码为0，人为指定提示信息 * @param data * @param msg */ public JsonResult(T data, String msg) { this.data = data; this.code = &quot;0&quot;; this.msg = msg; } // 省略get和set方法 }修改 Controller 中的返回值类型及测试@RestController @RequestMapping(&quot;/jsonresult&quot;) public class JsonResultController { @RequestMapping(&quot;/user&quot;) public JsonResult&lt;User&gt; getUser() { User user = new User(1, &quot;小明&quot;, &quot;123456&quot;); return new JsonResult&lt;&gt;(user); } }localhost:8080/jsonresult/user返回的json： {&quot;code&quot;:&quot;0&quot;,&quot;data&quot;:{&quot;id&quot;:1,&quot;password&quot;:&quot;123456&quot;,&quot;username&quot;:&quot;小明&quot;},&quot;msg&quot;:&quot;操作成功！&quot;}","link":"/2020/06/08/springboot%E4%B8%AD%E7%9A%84%E5%B0%81%E8%A3%85%E7%BB%9F%E4%B8%80%E8%BF%94%E5%9B%9E%E7%9A%84%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"数学","slug":"数学","link":"/tags/%E6%95%B0%E5%AD%A6/"},{"name":"数据库","slug":"数据库","link":"/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"},{"name":"idea","slug":"idea","link":"/tags/idea/"},{"name":"前后端分离","slug":"前后端分离","link":"/tags/%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB/"},{"name":"分层开发","slug":"分层开发","link":"/tags/%E5%88%86%E5%B1%82%E5%BC%80%E5%8F%91/"},{"name":"ssm","slug":"ssm","link":"/tags/ssm/"},{"name":"webapi","slug":"webapi","link":"/tags/webapi/"},{"name":"springboot","slug":"springboot","link":"/tags/springboot/"}],"categories":[{"name":"数学","slug":"数学","link":"/categories/%E6%95%B0%E5%AD%A6/"},{"name":"数据库","slug":"数据库","link":"/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"},{"name":"idea","slug":"idea","link":"/categories/idea/"},{"name":"前后端分离","slug":"前后端分离","link":"/categories/%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB/"},{"name":"分层开发","slug":"分层开发","link":"/categories/%E5%88%86%E5%B1%82%E5%BC%80%E5%8F%91/"},{"name":"ssm","slug":"分层开发/ssm","link":"/categories/%E5%88%86%E5%B1%82%E5%BC%80%E5%8F%91/ssm/"},{"name":"webapi","slug":"分层开发/webapi","link":"/categories/%E5%88%86%E5%B1%82%E5%BC%80%E5%8F%91/webapi/"},{"name":"springboot","slug":"springboot","link":"/categories/springboot/"}]}